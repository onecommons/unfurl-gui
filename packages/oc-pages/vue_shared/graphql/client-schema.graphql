extend type ApplicationBlueprintProject {
        overview: Overview! @client
        applicationBlueprint: ApplicationBlueprint! @client
}

extend type Environment {
  deploymentEnvironment: DeploymentEnvironment @client
}

extend type ResourceTemplates {
  resourceTemplates: [ResourceTemplate!] @client
}

type Overview {
  """
  Number of Deployments
  """
  deployments: Int

  """
  Short description of the project.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Full path of the project.
  """
  fullPath: ID!

  """
  ID of the project.
  """
  id: ID!

  """
  Image from unfurl file
  """
  image: String

  """
  General properties
  """
  inputs: [Input!]

  """
  Live preview url from unfurl file
  """
  livePreview: String

  """
  Name of the project (without namespace).
  """
  name: String!

  """
  OneCommons general outputs
  """
  outputs: [Output!]

  """
  OneCommons general requirements
  """
  requirements: [OldRequirement!]

  """
  OneCommons general resources
  """
  resources: [OldResource!]

  """
  OneCommons Services to connect
  """
  servicesToConnect: [ServiceToConnect!]

  """
  Source code url
  """
  sourceCodeUrl: String

  """
  OneCommons templates
  """
  templates(
    """
    If we want to search template by title.
    """
    searchBySlug: String

    """
    If we want to search template by title.
    """
    searchByTitle: String

    """
    If we want to search template by type.
    """
    searchByType: String
  ): [Template!]

  """
  Live preview url from unfurl file
  """
  title: String

  """
  Web URL of the project.
  """
  webUrl: String
}

type Input {

  """
  Name of the property
  """
  name: String!

  """
  Value of input
  """
  value: JSON
}

type Output {
  """
  Description of output
  """
  instructions: String

  """
  Title of output
  """
  title: String!
}

type OldRequirement {
  """
  Badge of  requirement
  """
  badge: String

  """
  Specific if node was created or connected
  """
  connected: Boolean

  """
  Specific if node was created or connected
  """
  created: Boolean

  """
  description of  requirement
  """
  description: String

  """
  Template inputs
  """
  inputs: [Input!]

  """
  Template outputs
  """
  outputs: [Output!]

  """
  status of requirement
  """
  status: Boolean

  """
  Title of  requirement
  """
  title: String!

  """
  Type of  requirement
  """
  type: String
}

type OldResource {
  """
  Avatar or image of resource
  """
  avatar: String

  """
  Badge of resource
  """
  badge: String

  """
  Description of resource
  """
  description: String

  """
  Template inputs
  """
  inputs: [Input!]

  """
  Name of resource
  """
  name: String!

  """
  Platform of resource
  """
  platform: String

  """
  List of requirements
  """
  requirements: JSON

  """
  Type of resource
  """
  type: String

  """
  Value of resource
  """
  value: String!
}

type ServiceToConnect {
  """
  Avatar or image of service
  """
  avatar: String

  """
  Description of Service
  """
  description: String

  """
  Name of Service
  """
  name: String!

  """
  Platform that service use
  """
  platform: String

  """
  Type of Service
  """
  type: String!

  """
  Value of Service
  """
  value: String
}

###############################
######## new schema ###########
###############################

type ApplicationBlueprint {
  
  primary: ResourceType!

  """
  Public deployment templates
  """
  deploymentTemplates(
    """
    If we want to search template by slug.
    """
    searchBySlug: String

    """
    If we want to search template by title.
    """
    searchByTitle: String
  ): [DeploymentTemplate!]

  name: String!
  title: String!

  """
  Short description of the project.
  """
  description: String

  """
  Live preview url from unfurl file
  """
  livePreview: String

  """
  Source code url
  """
  sourceCodeUrl: String

  """
  Image from unfurl file
  """
  image: String
}

type DeploymentTemplate {
  """
  Description of template
  """
  description: String

  blueprint: ApplicationBlueprint!

  """
  Required cloud provider

  TODO: should be ResourceType
  """
  cloud: String

  """
  Slug of template
  """
  slug: String!

  name: String!
  """
  Title of template
  """
  title: String!

  primary: ResourceTemplate!

  resourceTemplates: [ResourceTemplate!]
}

type ResourceType {
  name: String!
  title: String
  extends: [ResourceType!]
  description: String
  badge: String
  details_url: String

  """
  json-schema for inputs, will have a "properties" object that enumerates inputs  
  """
  inputsSchema: JSON
  outputsSchema: JSON
  requirements: [RequirementConstraint!]
  implementations: [String!]
  implementation_requirements: [String!]
}

type RequirementConstraint {
    name: String!

    description: String

    """
    Node type need to fulfill this requirement
    """
    resourceType: ResourceType!

    """
    minimum number of the requirement needed (0 means this is optional)
    """
    min: Int

    """
    maximum number of this requirements allowed (default: 1)
    """
    max: Int

    visibility: String
}

type ResourceTemplate {
  name: String!
  title: String

  type: ResourceType!

  description: String
  
  """
  Maps to an object that conforms to type.inputsSchema
  """
  properties: [Input!]
  outputs: [Output!] # TODO check if this is still a thing
  dependencies: [Dependency]
}

type Requirement {
  name: String
  constraint: RequirementConstraint!
  match: ResourceTemplate
  target: Resource
}

type Dependency {
  name: String
  constraint: RequirementConstraint!
  match: ResourceTemplate
  target: Resource
}

type DeploymentEnvironment {
  name: String!

  connections: [ResourceTemplate!]
  instances: [ResourceTemplate!]

  primary_provider: ResourceTemplate
  deployments: [Deployment!]
}

type Deployment {
  """
  Title of template
  """
  title: String!

  """
  Environment
  """
  environment: DeploymentEnvironment

  primary: Resource

  resources: [Resource!]

  job: Job
  ready: Boolean

  deploymentTemplate: DeploymentTemplate!
  sourceDeploymentTemplateName: String

  """
  Live preview url from unfurl file
  """
  url: String
}

# TODO
type Job {
  ranOn: Time 
}

type Resource {
  name: String!
  title: String!
  url: String
  template: ResourceTemplate!
  status: Status
  state: State
  attributes: [Input!]
  dependencies: [Requirement!]
}

enum Status {
  Unknown
  Ok
  Degraded
  Error
  Pending
  Absent
}

enum State {
  Initial
  Creating
  Created
  Configuring
  Configured
  Starting
  Started
  Stopping
  Stopped
  Deleting
  Deleted
  Error  
}

extend type Template {
  resourceTemplates: [ResourceTemplate!]
}


#extend type Query {
  #newApplicationBlueprint(
  #  """
  #  The full path of the project, group or namespace, e.g., `gitlab-org/gitlab-foss`.
  #  """
  #  fullPath: ID!
  #): ApplicationBlueprint

  
  #unfurlRootJSON(fullPath: ID!): JSON

  #applicationBlueprint(fullPath: ID!): JSON
  #unfurlRoot(fullPath: ID!):  ApplicationBlueprintProject
  #blueprintRaw(fullPath: ID!, name: String): JSON
  #deploymentTemplateRaw(fullPath: ID!, name: String): JSON
  #resourceTemplateRaw(fullPath: ID!, name: String): JSON
  #overview(fullPath: ID!): Overview
  #resourceType(name: String): ResourceType
  #resourceTemplate(name: String): ResourceTemplate
  #deploymentTemplates(deploymentTemplates: [String], fullPath: ID!): [DeploymentTemplate]

  #servicesToConnect: [ServiceToConnect!]
#}
